;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project : BW Digital Flame Sensor Ver 1
;Version : Ver 1
;Date    : 2/1/2017
;Author  : Intelligent Fire Fighting Robot Division
;Company : University of Brawijaya
;Comments:
;
;
;Chip type               : ATmega8
;Program type            : Application
;AVR Core Clock frequency: 16.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*******************************************************/
;
;#include <mega8.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <stdio.h>
;#include <stdlib.h>
;#include <delay.h>
;#include <math.h>
;#include <sleep.h>
;
;//char x=0;
;int baud_mode;
;int RANK[8];
;
;//UART SPEED CONFIG VARIABLES
;const int DEBUG_MODE = 2;
;const int ROBOT_MODE = 1;
;void UART_Speed_Config(int mode);
;
;
;void BW_Initialization(void);
;void Send_UART(unsigned char data);
;
;#ifndef RXB8
;#define RXB8 1
;#endif
;
;#ifndef TXB8
;#define TXB8 0
;#endif
;
;#ifndef UPE
;#define UPE 2
;#endif
;
;#ifndef DOR
;#define DOR 3
;#endif
;
;#ifndef FE
;#define FE 4
;#endif
;
;#ifndef UDRE
;#define UDRE 5
;#endif
;
;#ifndef RXC
;#define RXC 7
;#endif
;
;#define FRAMING_ERROR (1<<FE)
;#define PARITY_ERROR (1<<UPE)
;#define DATA_OVERRUN (1<<DOR)
;#define DATA_REGISTER_EMPTY (1<<UDRE)
;#define RX_COMPLETE (1<<RXC)
;
;// USART Receiver buffer
;#define RX_BUFFER_SIZE 8
;char rx_buffer[RX_BUFFER_SIZE];
;
;#if RX_BUFFER_SIZE <= 256
;unsigned char rx_wr_index,rx_rd_index,rx_counter;
;#else
;unsigned int rx_wr_index,rx_rd_index,rx_counter;
;#endif
;
;// This flag is set on USART Receiver buffer overflow
;bit rx_buffer_overflow;
;
;// USART Receiver interrupt service routine
;interrupt [USART_RXC] void usart_rx_isr(void)
; 0000 005D {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 005E char status,data;
; 0000 005F status=UCSRA;
;PCODE: $0000000F VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0060 data=UDR;
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 0061 if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 0062    {
; 0000 0063    rx_buffer[rx_wr_index++]=data;
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0064 #if RX_BUFFER_SIZE == 256
; 0000 0065    // special case for receiver buffer size=256
; 0000 0066    if (++rx_counter == 0)
; 0000 0067       {
; 0000 0068 #else
; 0000 0069    if (rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 006A    if (++rx_counter == RX_BUFFER_SIZE)
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 006B       {
; 0000 006C       rx_counter=0;
;PCODE: $00000025 VOL: 0
; 0000 006D #endif
; 0000 006E       rx_buffer_overflow=1;
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 006F       }
; 0000 0070    }
;PCODE: $00000029 VOL: 0
; 0000 0071 }
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Get a character from the USART Receiver buffer
;#define _ALTERNATE_GETCHAR_
;#pragma used+
;char getchar(void)
; 0000 0078 {
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0079 char data;
; 0000 007A while (rx_counter==0);
;PCODE: $00000031 VOL: 0
;	data -> R17
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 007B data=rx_buffer[rx_rd_index++];
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 007C #if RX_BUFFER_SIZE != 256
; 0000 007D if (rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 007E #endif
; 0000 007F #asm("cli")
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
	cli
;PCODE: $00000042 VOL: 0
; 0000 0080 --rx_counter;
;PCODE: $00000043 VOL: 0
; 0000 0081 #asm("sei")
;PCODE: $00000044 VOL: 0
	sei
;PCODE: $00000045 VOL: 0
; 0000 0082 return data;
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 0083 }
;PCODE: $00000049 VOL: 0
;#pragma used-
;#endif
;
;// Standard Input/Output functions
;#include <stdio.h>
;
;#define ADC_VREF_TYPE 0x60
;
;// Read the 8 most significant bits
;// of the AD conversion result
;unsigned char read_adc(unsigned char adc_input)
; 0000 008F {
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0090 ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
;	adc_input -> Y+0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0091 // Delay needed for the stabilization of the ADC input voltage
; 0000 0092 delay_us(10);
;PCODE: $0000004F VOL: 0
; 0000 0093 // Start the AD conversion
; 0000 0094 ADCSRA|=0x40;
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 0095 // Wait for the AD conversion to complete
; 0000 0096 while ((ADCSRA & 0x10)==0);
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 0097 ADCSRA|=0x10;
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 0098 return ADCH;
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 0099 }
;PCODE: $0000005D VOL: 0
;
;// Declare your global variables here
;unsigned int FLAME_ANALOG[9]={0,0,0,0,0,0,0,0,0};
;//unsigned int FLAME_LOGIC[8]={0,0,0,0,0,0,0,0};
;unsigned int FRONT_ANALOG;
;
;
;int FLAME_SENSOR=0;
;
;//FLAG VARIABLES
;unsigned int COMMAND_FLAG_A = 0x3C;

	.DSEG
;unsigned int COMMAND_FLAG_B = 0x3E;
;const unsigned int COMMAND_COMPLETED = 0x7C;
;
;unsigned int MAX_VAL;
;//MACRO
;int NO_FLAME            = 0;
;
;int FLAME_REAR_LEFT     = 1;
;int FLAME_LEFT          = 2;
;int FLAME_ASKEW_LEFT    = 3;
;int FLAME_FRONT         = 4;
;int FLAME_ASKEW_RIGHT   = 5;
;int FLAME_RIGHT         = 6;
;int FLAME_REAR_RIGHT    = 7;
;int FLAME_CENTER        = 4;
;
;//           ADC4
;//           ADC3
;//     ADC2       ADC5
;//  ADC1              ADC6
;//   ADC0           ADC7
;
;int m,k,flame_buffer[2];
;int SELECT[8] = {0,0,0,0,0,0,0,0};
;
;void CLEAR_SELECTION(void)
; 0000 00BF {

	.CSEG
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 00C0     int g;
; 0000 00C1     for(g=0;g <= 7;g++)
;PCODE: $00000060 VOL: 0
;	g -> R16,R17
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 00C2     {
; 0000 00C3         SELECT[g] = 0;
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 00C4     }
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 00C5 }
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;
;void swap(int *xp, int *yp)
; 0000 00C8 {
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 00C9     int temp = *xp;
; 0000 00CA     *xp = *yp;
;PCODE: $0000007A VOL: 0
;	*xp -> Y+4
;	*yp -> Y+2
;	temp -> R16,R17
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 00CB     *yp = temp;
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 00CC }
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;
;void bubbleSort(int arr[], int n)
; 0000 00CF {
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 00D0    int i, j;
; 0000 00D1    for (i = 0; i < n-1; i++)
;PCODE: $0000008A VOL: 0
;	arr -> Y+6
;	n -> Y+4
;	i -> R16,R17
;	j -> R18,R19
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 00D2 
; 0000 00D3        // Last i elements are already in place
; 0000 00D4        for (j = 0; j < n-i-1; j++)
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 00D5            if (arr[j] > arr[j+1])
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 00D6               swap(&arr[j], &arr[j+1]);
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 00D7 }
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;
;void main(void)
; 0000 00DA {
;PCODE: $000000CA VOL: 0
; 0000 00DB     // Declare your local variables here
; 0000 00DC     BW_Initialization();
;PCODE: $000000CB VOL: 0
; 0000 00DD //    UART_Speed_Config(DEBUG_MODE);
; 0000 00DE 
; 0000 00DF 
; 0000 00E0     while (1)
;PCODE: $000000CC VOL: 0
; 0000 00E1       {
; 0000 00E2             FLAME_ANALOG[0]=read_adc(0);
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0000 00E3             FLAME_ANALOG[1]=read_adc(1);
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0000 00E4             FLAME_ANALOG[2]=read_adc(2); //DI KALI 1.15 BIAR NILAI NYA BISA MAKS, KARENA GK TAU KENAPA NILAI ADC NYA GK MAU MAKS..
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
; 0000 00E5             FLAME_ANALOG[3]=read_adc(3);
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0000 00E6             FLAME_ANALOG[4]=read_adc(4);
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
; 0000 00E7             FLAME_ANALOG[5]=read_adc(5);
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0000 00E8             FLAME_ANALOG[6]=read_adc(6);
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0000 00E9             FLAME_ANALOG[7]=read_adc(7);
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
; 0000 00EA 
; 0000 00EB             for(m = 0;m <= 7;m++)
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
; 0000 00EC             {
; 0000 00ED                 RANK[m] = FLAME_ANALOG[m];
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
; 0000 00EE             }
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
; 0000 00EF 
; 0000 00F0             bubbleSort(RANK, 8);
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
; 0000 00F1 
; 0000 00F2 
; 0000 00F3             FRONT_ANALOG=FLAME_ANALOG[4];
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0000 00F4 
; 0000 00F5             MAX_VAL= max(FLAME_ANALOG[0],FLAME_ANALOG[1]);
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
; 0000 00F6             MAX_VAL= max(MAX_VAL,FLAME_ANALOG[2]);
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
; 0000 00F7             MAX_VAL= max(MAX_VAL,FLAME_ANALOG[3]);
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
; 0000 00F8 //            MAX_VAL= max(MAX_VAL,FLAME_ANALOG[4]);
; 0000 00F9             MAX_VAL= max(MAX_VAL,FLAME_ANALOG[5]);
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
; 0000 00FA             MAX_VAL= max(MAX_VAL,FLAME_ANALOG[6]);
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
; 0000 00FB             MAX_VAL= max(MAX_VAL,FLAME_ANALOG[7]);
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
; 0000 00FC 
; 0000 00FD             if(MAX_VAL>=100)
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
; 0000 00FE             {
; 0000 00FF //                if(MAX_VAL==FLAME_ANALOG[4])
; 0000 0100 //                {
; 0000 0101 //                    FLAME_SENSOR=FLAME_CENTER;
; 0000 0102 //                }
; 0000 0103 //                else
; 0000 0104                 if(MAX_VAL==FLAME_ANALOG[3])
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
; 0000 0105                 {
; 0000 0106                     FLAME_SENSOR=FLAME_FRONT;
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
; 0000 0107                 }
; 0000 0108                 else if(MAX_VAL==FLAME_ANALOG[2])
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
; 0000 0109                 {
; 0000 010A                     FLAME_SENSOR=FLAME_ASKEW_LEFT;
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
; 0000 010B                 }
; 0000 010C                 else if(MAX_VAL==FLAME_ANALOG[5])
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
; 0000 010D                 {
; 0000 010E                     FLAME_SENSOR=FLAME_ASKEW_RIGHT;
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
; 0000 010F                 }
; 0000 0110                 else if(MAX_VAL==FLAME_ANALOG[1])
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
; 0000 0111                 {
; 0000 0112                     FLAME_SENSOR=FLAME_LEFT;
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
; 0000 0113                 }
; 0000 0114                 else if(MAX_VAL==FLAME_ANALOG[6])
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
; 0000 0115                 {
; 0000 0116                     FLAME_SENSOR=FLAME_RIGHT;
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
; 0000 0117                 }
; 0000 0118                 else if(MAX_VAL==FLAME_ANALOG[0])
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
; 0000 0119                 {
; 0000 011A                     FLAME_SENSOR=FLAME_REAR_LEFT;
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
; 0000 011B                 }
; 0000 011C                 else if(MAX_VAL==FLAME_ANALOG[7])
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
; 0000 011D                 {
; 0000 011E                     FLAME_SENSOR=FLAME_REAR_RIGHT;
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
; 0000 011F                 }
; 0000 0120 
; 0000 0121             }
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
; 0000 0122             else
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
; 0000 0123             {
; 0000 0124                 FLAME_SENSOR=NO_FLAME;
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
; 0000 0125             }
;PCODE: $0000019D VOL: 0
; 0000 0126 
; 0000 0127             Send_UART(COMMAND_FLAG_A);
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
; 0000 0128             Send_UART(COMMAND_FLAG_B);
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
; 0000 0129 
; 0000 012A             Send_UART(FLAME_SENSOR);
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
; 0000 012B             if(FLAME_ANALOG[4] >= 110)
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
; 0000 012C             {
; 0000 012D                 FLAME_SENSOR = FLAME_FRONT;
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
; 0000 012E                 Send_UART(FLAME_SENSOR);
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
; 0000 012F             }
; 0000 0130             else Send_UART(NO_FLAME);
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
; 0000 0131 
; 0000 0132             CLEAR_SELECTION();
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
; 0000 0133 
; 0000 0134             for(m = 0;m <= 7;m++)
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
; 0000 0135             {
; 0000 0136                 flame_buffer[0] = RANK[m];
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
; 0000 0137                 for(k = 0;k <= 7;k++)
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
; 0000 0138                 {
; 0000 0139                     flame_buffer[1] = FLAME_ANALOG[k];
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
; 0000 013A                     if((flame_buffer[0] == flame_buffer[1]) && (flame_buffer[0] > 100))
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
; 0000 013B                     {
; 0000 013C                         if(k == 4 && SELECT[4] == 0){FLAME_SENSOR = FLAME_CENTER;SELECT[4] = 1;}
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
; 0000 013D                         else if(k == 3 && SELECT[3] == 0){FLAME_SENSOR = FLAME_FRONT;SELECT[3] = 1;}
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
; 0000 013E                         else if(k == 2 && SELECT[2] == 0){FLAME_SENSOR = FLAME_ASKEW_LEFT;SELECT[2] = 1;}
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
; 0000 013F                         else if(k == 5 && SELECT[5] == 0){FLAME_SENSOR = FLAME_ASKEW_RIGHT;SELECT[5] = 1;}
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
; 0000 0140                         else if(k == 1 && SELECT[1] == 0){FLAME_SENSOR = FLAME_LEFT;SELECT[1] = 1;}
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
; 0000 0141                         else if(k == 6 && SELECT[6] == 0){FLAME_SENSOR = FLAME_RIGHT;SELECT[6] = 1;}
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
; 0000 0142                         else if(k == 0 && SELECT[0] == 0){FLAME_SENSOR = FLAME_REAR_LEFT;SELECT[0] = 1;}
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
; 0000 0143                         else if(k == 7 && SELECT[7] == 0){FLAME_SENSOR = FLAME_REAR_RIGHT;SELECT[7] = 1;}
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
; 0000 0144                         break;
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
; 0000 0145                     }
; 0000 0146                     else FLAME_SENSOR = NO_FLAME;
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
; 0000 0147                 }
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
;PCODE: $00000286 VOL: 0
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
; 0000 0148                Send_UART(FLAME_SENSOR);
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
; 0000 0149             }
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
;PCODE: $00000292 VOL: 0
;PCODE: $00000293 VOL: 0
;PCODE: $00000294 VOL: 0
; 0000 014A 
; 0000 014B //            printf("FLAME = %d \t",FLAME_SENSOR);
; 0000 014C //            printf("FA = %d \r",FRONT_ANALOG);
; 0000 014D //            delay_ms(100);
; 0000 014E //
; 0000 014F 
; 0000 0150       }
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
; 0000 0151 }
;PCODE: $00000297 VOL: 0
;PCODE: $00000298 VOL: 0
;PCODE: $00000299 VOL: 0
;
;
;void BW_Initialization(void)
; 0000 0155 {
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 0
; 0000 0156     // Input/Output Ports initialization
; 0000 0157     // Port B initialization
; 0000 0158     // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0159     // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 015A     PORTB=0x00;
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
; 0000 015B     DDRB=0x00;
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
; 0000 015C 
; 0000 015D     // Port C initialization
; 0000 015E     // Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 015F     // State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0160     PORTC=0x00;
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0
; 0000 0161     DDRC=0x00;
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
; 0000 0162 
; 0000 0163     // Port D initialization
; 0000 0164     // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0165     // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0166     PORTD=0x00;
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
; 0000 0167     DDRD=0x00;
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
; 0000 0168 
; 0000 0169     // Timer/Counter 0 initialization
; 0000 016A     // Clock source: System Clock
; 0000 016B     // Clock value: Timer 0 Stopped
; 0000 016C     TCCR0=0x00;
;PCODE: $000002A8 VOL: 0
;PCODE: $000002A9 VOL: 0
; 0000 016D     TCNT0=0x00;
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
; 0000 016E 
; 0000 016F     // Timer/Counter 1 initialization
; 0000 0170     // Clock source: System Clock
; 0000 0171     // Clock value: Timer1 Stopped
; 0000 0172     // Mode: Normal top=0xFFFF
; 0000 0173     // OC1A output: Discon.
; 0000 0174     // OC1B output: Discon.
; 0000 0175     // Noise Canceler: Off
; 0000 0176     // Input Capture on Falling Edge
; 0000 0177     // Timer1 Overflow Interrupt: Off
; 0000 0178     // Input Capture Interrupt: Off
; 0000 0179     // Compare A Match Interrupt: Off
; 0000 017A     // Compare B Match Interrupt: Off
; 0000 017B     TCCR1A=0x00;
;PCODE: $000002AC VOL: 0
;PCODE: $000002AD VOL: 0
; 0000 017C     TCCR1B=0x00;
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
; 0000 017D     TCNT1H=0x00;
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
; 0000 017E     TCNT1L=0x00;
;PCODE: $000002B2 VOL: 0
;PCODE: $000002B3 VOL: 0
; 0000 017F     ICR1H=0x00;
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0
; 0000 0180     ICR1L=0x00;
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 0
; 0000 0181     OCR1AH=0x00;
;PCODE: $000002B8 VOL: 0
;PCODE: $000002B9 VOL: 0
; 0000 0182     OCR1AL=0x00;
;PCODE: $000002BA VOL: 0
;PCODE: $000002BB VOL: 0
; 0000 0183     OCR1BH=0x00;
;PCODE: $000002BC VOL: 0
;PCODE: $000002BD VOL: 0
; 0000 0184     OCR1BL=0x00;
;PCODE: $000002BE VOL: 0
;PCODE: $000002BF VOL: 0
; 0000 0185 
; 0000 0186     // Timer/Counter 2 initialization
; 0000 0187     // Clock source: System Clock
; 0000 0188     // Clock value: Timer2 Stopped
; 0000 0189     // Mode: Normal top=0xFF
; 0000 018A     // OC2 output: Disconnected
; 0000 018B     ASSR=0x00;
;PCODE: $000002C0 VOL: 0
;PCODE: $000002C1 VOL: 0
; 0000 018C     TCCR2=0x00;
;PCODE: $000002C2 VOL: 0
;PCODE: $000002C3 VOL: 0
; 0000 018D     TCNT2=0x00;
;PCODE: $000002C4 VOL: 0
;PCODE: $000002C5 VOL: 0
; 0000 018E     OCR2=0x00;
;PCODE: $000002C6 VOL: 0
;PCODE: $000002C7 VOL: 0
; 0000 018F 
; 0000 0190     // External Interrupt(s) initialization
; 0000 0191     // INT0: Off
; 0000 0192     // INT1: Off
; 0000 0193     MCUCR=0x00;
;PCODE: $000002C8 VOL: 0
;PCODE: $000002C9 VOL: 0
; 0000 0194 
; 0000 0195     // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0196     TIMSK=0x00;
;PCODE: $000002CA VOL: 0
;PCODE: $000002CB VOL: 0
; 0000 0197 
; 0000 0198     // USART initialization
; 0000 0199     // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 019A     // USART Receiver: On
; 0000 019B     // USART Transmitter: On
; 0000 019C     // USART Mode: Asynchronous
; 0000 019D     // USART Baud Rate: 9600
; 0000 019E     UCSRA=0x00;
;PCODE: $000002CC VOL: 0
;PCODE: $000002CD VOL: 0
; 0000 019F     UCSRB=0x98;
;PCODE: $000002CE VOL: 0
;PCODE: $000002CF VOL: 0
; 0000 01A0     UCSRC=0x86;
;PCODE: $000002D0 VOL: 0
;PCODE: $000002D1 VOL: 0
; 0000 01A1     UBRRH=0x00;
;PCODE: $000002D2 VOL: 0
;PCODE: $000002D3 VOL: 0
; 0000 01A2     UBRRL=0x67;
;PCODE: $000002D4 VOL: 0
;PCODE: $000002D5 VOL: 0
; 0000 01A3 
; 0000 01A4     // Analog Comparator initialization
; 0000 01A5     // Analog Comparator: Off
; 0000 01A6     // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 01A7     ACSR=0x80;
;PCODE: $000002D6 VOL: 0
;PCODE: $000002D7 VOL: 0
; 0000 01A8     SFIOR=0x00;
;PCODE: $000002D8 VOL: 0
;PCODE: $000002D9 VOL: 0
; 0000 01A9 
; 0000 01AA     // ADC initialization
; 0000 01AB     // ADC Clock frequency: 1000.000 kHz
; 0000 01AC     // ADC Voltage Reference: AVCC pin
; 0000 01AD     // Only the 8 most significant bits of
; 0000 01AE     // the AD conversion result are used
; 0000 01AF     ADMUX=ADC_VREF_TYPE & 0xff;
;PCODE: $000002DA VOL: 0
;PCODE: $000002DB VOL: 0
; 0000 01B0     ADCSRA=0x84;
;PCODE: $000002DC VOL: 0
;PCODE: $000002DD VOL: 0
; 0000 01B1 
; 0000 01B2     // SPI initialization
; 0000 01B3     // SPI disabled
; 0000 01B4     SPCR=0x00;
;PCODE: $000002DE VOL: 0
;PCODE: $000002DF VOL: 0
; 0000 01B5 
; 0000 01B6     // TWI initialization
; 0000 01B7     // TWI disabled
; 0000 01B8     TWCR=0x00;
;PCODE: $000002E0 VOL: 0
;PCODE: $000002E1 VOL: 0
; 0000 01B9 
; 0000 01BA     // Global enable interrupts
; 0000 01BB     #asm("sei")
;PCODE: $000002E2 VOL: 0
	sei
;PCODE: $000002E3 VOL: 0
; 0000 01BC 
; 0000 01BD }
;PCODE: $000002E4 VOL: 0
;PCODE: $000002E5 VOL: 0
;
;void UART_Speed_Config(int mode)
; 0000 01C0 {
;PCODE: $000002E6 VOL: 0
;PCODE: $000002E7 VOL: 0
; 0000 01C1     //BAUD RATE SELECT INITIALIZATION
; 0000 01C2     if (PINB.3==0) baud_mode=1;
;	mode -> Y+0
;PCODE: $000002E8 VOL: 0
;PCODE: $000002E9 VOL: 0
;PCODE: $000002EA VOL: 0
;PCODE: $000002EB VOL: 0
;PCODE: $000002EC VOL: 0
; 0000 01C3     else if (PINB.3==1) baud_mode=2;
;PCODE: $000002ED VOL: 0
;PCODE: $000002EE VOL: 0
;PCODE: $000002EF VOL: 0
;PCODE: $000002F0 VOL: 0
;PCODE: $000002F1 VOL: 0
;PCODE: $000002F2 VOL: 0
;PCODE: $000002F3 VOL: 0
; 0000 01C4 
; 0000 01C5     switch(mode)
;PCODE: $000002F4 VOL: 0
;PCODE: $000002F5 VOL: 0
;PCODE: $000002F6 VOL: 0
; 0000 01C6     {
; 0000 01C7         case 1:
;PCODE: $000002F7 VOL: 0
;PCODE: $000002F8 VOL: 0
; 0000 01C8             {
; 0000 01C9                 UBRRH=0x00;
;PCODE: $000002F9 VOL: 0
;PCODE: $000002FA VOL: 0
; 0000 01CA                 UBRRL=0x00;
;PCODE: $000002FB VOL: 0
;PCODE: $000002FC VOL: 0
; 0000 01CB             }break;
;PCODE: $000002FD VOL: 0
; 0000 01CC         case 2:
;PCODE: $000002FE VOL: 0
;PCODE: $000002FF VOL: 0
;PCODE: $00000300 VOL: 0
; 0000 01CD             {
; 0000 01CE                 UBRRH=0x00;
;PCODE: $00000301 VOL: 0
;PCODE: $00000302 VOL: 0
; 0000 01CF                 UBRRL=0x67;
;PCODE: $00000303 VOL: 0
;PCODE: $00000304 VOL: 0
; 0000 01D0             }break;
;PCODE: $00000305 VOL: 0
; 0000 01D1 
; 0000 01D2     }
;PCODE: $00000306 VOL: 0
; 0000 01D3 
; 0000 01D4     #asm("cli")
;PCODE: $00000307 VOL: 0
	cli
;PCODE: $00000308 VOL: 0
; 0000 01D5 
; 0000 01D6     #asm("sei")
;PCODE: $00000309 VOL: 0
	sei
;PCODE: $0000030A VOL: 0
; 0000 01D7 }
;PCODE: $0000030B VOL: 0
;PCODE: $0000030C VOL: 0
;PCODE: $0000030D VOL: 0
;
;void Send_UART(unsigned char data)
; 0000 01DA {
;PCODE: $0000030E VOL: 0
;PCODE: $0000030F VOL: 0
; 0000 01DB     while(!(UCSRA & (1<<UDRE))){};
;	data -> Y+0
;PCODE: $00000310 VOL: 0
;PCODE: $00000311 VOL: 0
;PCODE: $00000312 VOL: 0
;PCODE: $00000313 VOL: 0
;PCODE: $00000314 VOL: 0
;PCODE: $00000315 VOL: 0
; 0000 01DC     UDR=data;
;PCODE: $00000316 VOL: 0
;PCODE: $00000317 VOL: 0
; 0000 01DD }
;PCODE: $00000318 VOL: 0
;PCODE: $00000319 VOL: 0
;PCODE: $0000031A VOL: 0
